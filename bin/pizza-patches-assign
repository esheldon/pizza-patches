#!/usr/bin/env python

from pizza_patches.patches import get_labels, make_patches_output


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--info',
        help='pizza cutter info file',
        required=True,
    )
    parser.add_argument(
        '--output',
        help=(
            'file containing patch num for each pizza slice, '
            'as well as the centers info for each kmeans patch'
            'in extension 2',
        ),
        required=True,
    )
    parser.add_argument(
        '--npatch',
        type=int,
        default=200,
        help='number of patches to use',
    )
    parser.add_argument(
        '--seed',
        type=int,
        default=9999,
        help='seed for rng used for making starting kmeans centers',
    )

    return parser.parse_args()


def read_catalog(fname):
    import fitsio
    print('reading:', fname)
    return fitsio.read(fname)


def write_output(fname, output, centers):
    import fitsio

    print('writing:', fname)
    with fitsio.FITS(fname, 'rw', clobber=True) as fits:
        print('  writing patch_map')
        fits.write(output, extname='patch_map')
        print('  writing centers')
        fits.write(centers, extname='centers')


def main():
    args = get_args()

    info = read_catalog(args.info)

    print('getting labels')
    labels, centers = get_labels(
        info['ra'], info['dec'], npatch=args.npatch, seed=args.seed,
    )

    output = make_patches_output(
        pizza_ids=info['pizza_id'],
        ra=info['ra'], dec=info['dec'],
        labels=labels,
    )
    del info
    write_output(args.output, output, centers)


if __name__ == '__main__':
    main()
