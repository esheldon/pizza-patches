#!/usr/bin/env python

from pizza_patches.patches import get_centers, get_labels, make_patches_output


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--info',
        help='pizza cutter info file',
        required=True,
    )
    parser.add_argument(
        '--mask',
        help='mask to remove objects',
        required=True,
    )
    parser.add_argument(
        '--output',
        help=(
            'file containing patch num for each pizza slice, '
            'as well as the centers info for each kmeans patch'
            'in extension 2',
        ),
        required=True,
    )
    parser.add_argument(
        '--centers-output',
        help=(
            'file containing patch num and center x, y, z'
        ),
        required=True,
    )

    parser.add_argument(
        '--npatch',
        type=int,
        default=200,
        help='number of patches to use',
    )
    parser.add_argument(
        '--seed',
        type=int,
        default=9999,
        help='seed for rng used for making starting kmeans centers',
    )

    return parser.parse_args()


def read_catalog(fname):
    import fitsio

    print('reading:', fname)
    return fitsio.read(fname)


def read_mask(fname):
    import healsparse as hsp

    print('reading:', fname)
    return hsp.HealSparseMap.read(fname)


def get_centers_output(centers):
    import numpy as np
    dtype = [
        ('patch', 'i4'),
        ('x', 'f8'),
        ('y', 'f8'),
        ('z', 'f8'),
    ]

    n = centers.shape[0]
    st = np.zeros(n, dtype=dtype)
    st['patch'] = np.arange(n)
    st['x'] = centers[:, 0]
    st['y'] = centers[:, 1]
    st['z'] = centers[:, 2]
    return st


def write_output(args, output, centers):
    import fitsio

    cenout = get_centers_output(centers)

    print('writing:', args.output)
    fitsio.write(args.output, output, clobber=True, extname='patch_map')

    print('writing:', args.centers_output)
    fitsio.write(args.centers_output, cenout, clobber=True, extname='centers')


def main():
    args = get_args()

    info = read_catalog(args.info)
    mask = read_mask(args.mask)

    centers = get_centers(
        ra=info['ra'],
        dec=info['dec'],
        mask=mask,
        npatch=args.npatch,
        seed=args.seed,
    )

    labels = get_labels(
        ra=info['ra'],
        dec=info['dec'],
        centers=centers,
    )
    assert labels.size == info.size

    output = make_patches_output(
        pizza_ids=info['pizza_id'],
        ra=info['ra'], dec=info['dec'],
        labels=labels,
    )

    write_output(args, output, centers)


if __name__ == '__main__':
    main()
