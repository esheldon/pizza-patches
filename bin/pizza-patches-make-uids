#!/usr/bin/env python

from pizza_patches.util import load_flist


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--flist',
        help='list of metadetect outputs',
        required=True,
    )
    parser.add_argument(
        '--output',
        help='uid file',
        required=True,
    )
    return parser.parse_args()


def go(sorted_flist, output_file):
    import yaml
    import fitsio
    import os
    from tqdm import tqdm

    uid_info = {}

    start = 0
    for i, fname in enumerate(tqdm(sorted_flist)):
        with fitsio.FITS(fname) as fits:
            nrows = fits[1].get_nrows()
            end = start + nrows

            basename = os.path.basename(fname)
            assert basename not in uid_info

            uid_info[basename] = {
                'uid_start': start,
                'uid_end': end,
            }

            start = end

    print('writing:', output_file)
    with open(output_file, 'w') as fobj:
        yaml.dump(uid_info, fobj)


def main():
    args = get_args()

    flist = load_flist(args.flist)
    flist.sort()

    go(sorted_flist=flist, output_file=args.output)


if __name__ == '__main__':
    main()
