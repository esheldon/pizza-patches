#!/usr/bin/env python

from tqdm import tqdm


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--flist', nargs='+',
        help='metadetect output files',
        required=True,
    )
    parser.add_argument(
        '--patches',
        help='pizza cutter patches file',
        required=True,
    )
    parser.add_argument(
        '--outdir',
        help='output dir, will be created',
        required=True,
    )

    return parser.parse_args()


def create_or_append_output(fname, output):
    import fitsio
    with fitsio.FITS(fname, 'rw') as fits:
        if 'object_data' not in fits:
            fits.write(output)
        else:
            fits['object_data'].append(output)


def write_outputs_to_patch_files(data, patches, sind):
    import esutil as eu
    import numpy as np
    from pizza_patches.util import get_patch_file, get_pizza_ids

    print('    getting ids')
    pizza_ids = get_pizza_ids(
        data['tilename'], data['slice_id'],
    )

    print('    matching')
    mpatches, mdata = match_ids(
        arr1=patches['pizza_id'],
        arr2=pizza_ids,
        sort1=sind,
    )
    assert mdata.size == data.size

    print('    writing outputs')
    patch_nums = patches['patch_num'][mpatches]
    output = make_output(data, patch_nums)

    hist, rev = eu.stat.histogram(patch_nums, rev=True)
    for i in range(hist.size):
        if rev[i] != rev[i+1]:
            w = rev[rev[i]:rev[i+1]]

            # should all be the same
            assert np.unique(output['patch_num'][w]).size == 1

            patch_num = output['patch_num'][w[0]]
            patch_file = get_patch_file(args.outdir, patch_num)
            print('        ', patch_file, w.size)
            create_or_append_output(patch_file, output[w])

    del output


def read_fits(fname, columns=None, verbose=False):
    import fitsio
    if verbose:
        print('reading:', fname)
    return fitsio.read(fname, columns=columns)


def read_catalog(fname, idstart):
    import numpy as np
    import esutil as eu
    columns = [
        'tilename',
        'slice_id',
        'ra',
        'dec',
        'mdet_step',

        'mask_flags',
        'mfrac',
        'mfrac_img',

        'shear_bands',

        'psfrec_flags',
        'psfrec_g_1',
        'psfrec_g_2',
        'psfrec_T',

        'wmom_flags',
        'wmom_s2n',
        'wmom_g_1',
        'wmom_g_2',
        'wmom_g_cov_1_1',
        'wmom_g_cov_1_2',
        'wmom_g_cov_2_2',
        'wmom_T_flags',
        'wmom_T_err',
        'wmom_T_ratio',
        'wmom_psf_T',

        # 'pgauss_flags',
        'pgauss_T_flags',
        'pgauss_T_err',
        'pgauss_T',
        # 'pgauss_psf_T',
        'pgauss_band_flux_flags_g',
        'pgauss_band_flux_flags_r',
        'pgauss_band_flux_flags_i',
        'pgauss_band_flux_flags_z',
        'pgauss_band_flux_g',
        'pgauss_band_flux_r',
        'pgauss_band_flux_i',
        'pgauss_band_flux_z',
        # 'pgauss_band_flux_err_g',
        # 'pgauss_band_flux_err_r',
        # 'pgauss_band_flux_err_i',
        # 'pgauss_band_flux_err_z',
    ]
    data = read_fits(fname, columns=columns)
    data = eu.numpy_util.add_fields(data, [('uid', 'i8')])
    data['uid'] = idstart + np.arange(data.size)

    idstart = idstart + data.size

    w, = np.where(data['shear_bands'] == '123')
    if w.size == 0:
        data = None
    else:
        data = data[w]

    return data, idstart


def match_ids(arr1, arr2, sort1=None):
    import numpy as np
    if sort1 is None:
        sort1 = arr1.argsort()

    sub1 = np.searchsorted(arr1, arr2, sorter=sort1)
    sub2, = np.where(arr1[sort1[sub1]] == arr2)
    sub1 = sort1[sub1[sub2]]

    return sub1, sub2


def make_output(data, patch_nums):
    import esutil as eu
    output = eu.numpy_util.add_fields(
        data,
        [('patch_num', 'i2')]
    )
    output['patch_num'] = patch_nums
    return output


def main(args):

    patches = read_fits(args.patches, verbose=True)
    sind = patches['pizza_id'].argsort()

    idstart = 0
    nf = len(args.flist)
    #  for ii, fname in enumerate(args.flist):
    for ii, fname in enumerate(tqdm(args.flist)):
        print(f'{ii+1}/{nf} {fname}')
        data, idstart = read_catalog(fname=fname, idstart=idstart)
        if data is None:
            print('no objects passed basic cut')
            continue

        print('partitioning and writing')
        write_outputs_to_patch_files(data=data, patches=patches, sind=sind)

        del data


if __name__ == '__main__':
    args = get_args()
    main(args)
