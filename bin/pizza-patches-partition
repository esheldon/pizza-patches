#!/usr/bin/env python

from tqdm import tqdm
from pizza_patches.util import load_flist, load_yaml


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--flist',
        help='file holding metadetect output files',
        required=True,
    )
    parser.add_argument(
        '--patches',
        help='pizza cutter patches file',
        required=True,
    )
    parser.add_argument(
        '--uid-info',
        help='file holding uid info',
        required=True,
    )
    parser.add_argument(
        '--outdir',
        help='output dir, will be created',
        required=True,
    )

    return parser.parse_args()


def create_or_append_output(fname, output):
    import fitsio

    with fitsio.FITS(fname, 'rw') as fits:
        if 'object_data' not in fits:
            fits.write(output)
        else:
            fits['object_data'].append(output)


def write_outputs_to_patch_files(data, patches, sind):
    """
    write the outputs into the appropriate patch files

    the patch_num field in data is filled in
    """
    import esutil as eu
    import numpy as np
    from pizza_patches.util import get_mdet_patch_file, get_pizza_ids

    print('    getting pizza ids')
    pizza_ids = get_pizza_ids(
        data['tilename'], data['slice_id'],
    )

    print('    matching to get patch numbers')
    mpatches, mdata = match_ids(
        arr1=patches['pizza_id'],
        arr2=pizza_ids,
        sort1=sind,
    )
    assert mdata.size == data.size

    print('    writing outputs')
    data['patch_num'] = patches['patch_num'][mpatches]

    hist, rev = eu.stat.histogram(data['patch_num'], rev=True)
    for i in range(hist.size):
        if rev[i] != rev[i + 1]:
            w = rev[rev[i]:rev[i + 1]]

            # should all be the same
            assert np.unique(data['patch_num'][w]).size == 1

            patch_num = data['patch_num'][w[0]]
            patch_file = get_mdet_patch_file(args.outdir, patch_num)
            print('        ', patch_file, w.size)
            create_or_append_output(patch_file, data[w])


def read_fits(fname, columns=None, verbose=False):
    import fitsio
    if verbose:
        print('reading:', fname)
    return fitsio.read(fname, columns=columns)


def make_output(data):
    import numpy as np
    dtype = get_output_dtype()
    output = np.zeros(data.size, dtype=dtype)

    for name in output.dtype.names:
        if name in ('uid', 'patch_num'):
            continue
        output[name] = data[name]

    output['patch_num'] = -9999
    output['uid'] = -9999

    return output


def get_output_dtype():
    return [
        ('uid', 'i4'),
        ('patch_num', 'i2'),

        ('tilename', 'U12'),
        ('slice_id', 'i2'),

        ('mdet_step', 'U7'),

        ('ra', 'f8'),
        ('dec', 'f8'),
        ('x', 'f4'),
        ('y', 'f4'),

        ('mfrac', 'f4'),
        ('mfrac_img', 'f4'),

        ('nepoch_g', 'i4'),
        ('nepoch_r', 'i4'),
        ('nepoch_i', 'i4'),
        ('nepoch_z', 'i4'),

        ('psfrec_g_1', 'f8'),
        ('psfrec_g_2', 'f8'),
        ('psfrec_T', 'f4'),

        ('wmom_s2n', 'f4'),
        ('wmom_g_1', 'f8'),
        ('wmom_g_2', 'f8'),
        ('wmom_g_cov_1_1', 'f4'),
        ('wmom_g_cov_1_2', 'f4'),
        ('wmom_g_cov_2_2', 'f4'),
        ('wmom_T_err', 'f4'),
        ('wmom_T_ratio', 'f4'),
        ('wmom_psf_T', 'f4'),

        ('pgauss_T_err', 'f4'),
        ('pgauss_T', 'f4'),
        ('pgauss_psf_T', 'f4'),
        ('pgauss_band_flux_g', 'f4'),
        ('pgauss_band_flux_r', 'f4'),
        ('pgauss_band_flux_i', 'f4'),
        ('pgauss_band_flux_z', 'f4'),
        ('pgauss_band_flux_err_g', 'f4'),
        ('pgauss_band_flux_err_r', 'f4'),
        ('pgauss_band_flux_err_i', 'f4'),
        ('pgauss_band_flux_err_z', 'f4'),
    ]


def read_catalog(fname, uid_info):
    """
    read the catalog and add uid and patch_num fields.  The uid is
    set but patch_num is left as -9999

    Some data types what are not used for precise aggregates are down converted
    to smaller precision.

    Various cuts are applied

    Parameters
    ----------
    fname: str
        Path to the metadetect output
    uid_info: dict
        Keyed by file path basename, holds keys uid_start and uid_end

    Returns
    -------
    data with a subset of rows and cols
    """
    import numpy as np
    import os

    orig_data = read_fits(fname)

    data = make_output(orig_data)

    info = uid_info[os.path.basename(fname)]
    data['uid'] = np.arange(info['uid_start'], info['uid_end'])

    # not all of these are in output
    w, = np.where(
        (orig_data['psfrec_flags'] == 0) &
        (orig_data['wmom_flags'] == 0) &
        (orig_data['wmom_s2n'] > 5) &
        (orig_data['pgauss_T_flags'] == 0) &
        (orig_data['pgauss_s2n'] > 5) &
        (orig_data['pgauss_band_flux_flags_g'] == 0) &
        (orig_data['pgauss_band_flux_flags_r'] == 0) &
        (orig_data['pgauss_band_flux_flags_i'] == 0) &
        (orig_data['pgauss_band_flux_flags_z'] == 0) &
        (orig_data['mask_flags'] == 0) &
        (orig_data['shear_bands'] == '123')
    )
    data = data[w]

    return data


def match_ids(arr1, arr2, sort1=None):
    import numpy as np

    if sort1 is None:
        sort1 = arr1.argsort()

    sub1 = np.searchsorted(arr1, arr2, sorter=sort1)
    sub2, = np.where(arr1[sort1[sub1]] == arr2)
    sub1 = sort1[sub1[sub2]]

    return sub1, sub2


def make_outdir(outdir):
    import os
    from glob import glob

    if not os.path.exists(outdir):
        os.makedirs(outdir)
        print('created directory:', outdir)
    else:
        flist = glob(outdir + '/*')
        if len(flist) > 0:
            raise RuntimeError(f'outdir {outdir} is not empty')


def main(args):

    make_outdir(args.outdir)

    uid_info = load_yaml(args.uid_info)
    flist = load_flist(args.flist)
    patches = read_fits(args.patches, verbose=True)
    sind = patches['pizza_id'].argsort()

    for ii, fname in enumerate(tqdm(flist)):
        print(fname)
        data = read_catalog(fname=fname, uid_info=uid_info)
        if data.size == 0:
            print('no objects passed basic cut')
            continue

        print('partitioning and writing')
        write_outputs_to_patch_files(data=data, patches=patches, sind=sind)

        del data


if __name__ == '__main__':
    args = get_args()
    main(args)
