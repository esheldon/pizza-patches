#!/usr/bin/env python
import glob
import numpy as np
import os
import sys
import pprint

import fitsio
import h5py
from esutil.pbar import PBar

SHEARS = ["noshear", "1p", "1m", "2p", "2m"]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--output-file-name',
        help='the output file name',
        required=True,
    )
    parser.add_argument(
        '--input-file-dir',
        help='the input FITS file directory',
        required=True,
    )

    return parser.parse_args()


def _process_file(fname, num_per_shear, fp):
    d = fitsio.read(fname, ext=1)

    if d.shape[0] == 0:
        return num_per_shear

    for mdet_step in SHEARS:
        msk = d["mdet_step"] == mdet_step
        d_mdet = d[msk]
        loc = num_per_shear[mdet_step]
        _num = d_mdet.shape[0]
        if _num > 0:
            for col in d.dtype.names:
                if col == "mdet_step":
                    continue
                fp["mdet"][mdet_step][col][loc:loc + _num] = d_mdet[col].astype(fp["mdet"][mdet_step][col].dtype)

            num_per_shear[mdet_step] += _num

    return num_per_shear


def main(args):
    ofile_hdf5 = args.output_file_name

    cut_files = sorted(glob.glob(
        os.path.join(args.input_file_dir, "*.fits")
    ))
    print(f"found {len(cut_files)} input files...", flush=True)

    d = fitsio.read(cut_files[0])

    print(f"removing output file {ofile_hdf5}...", flush=True)
    os.system(f"rm -f {ofile_hdf5}")

    print(f"creating output file {ofile_hdf5}...", flush=True)
    with h5py.File(ofile_hdf5, "w") as fp:
        mdet_grp = fp.create_group("mdet")
        for mdet_step in SHEARS:
            grp = mdet_grp.create_group(mdet_step)
            for col in d.dtype.names:
                if col == "mdet_step":
                    continue
                dt = d[col].dtype
                if col.endswith("_nodered"):
                    dt = np.dtype(">f4")
                elif col == "tilename":
                    dt = np.dtype("<S12")
                elif col == "mdet_step":
                    dt = np.dtype("<S7")

                grp.create_dataset(
                    col,
                    dtype=dt,
                    shape=(160_000_000,),
                    maxshape=(None,),
                )

    with h5py.File(ofile_hdf5, "a") as fp:
        num_per_shear = {
            key: 0 for key in SHEARS
        }
        for i, fname in PBar(
            enumerate(cut_files),
            desc="processing FITS files",
            total=len(cut_files),
            file=sys.stdout,
        ):
            num_per_shear = _process_file(fname, num_per_shear, fp)
            if i % 100 == 0:
                num = num_per_shear["noshear"]
                print(
                    f"\nexpecting ~{num/(i+1)*len(cut_files)/1e6:6.2f} "
                    f"million objects ({num/1e6:6.2f} million so far)",
                    flush=True,
                )
                fp.flush()

    print("final counts:", pprint.pformat(num_per_shear), flush=True)

    print("resizing final datasets...", flush=True)
    with h5py.File(ofile_hdf5, "a") as fp:
        for shear in SHEARS:
            sgrp = fp["mdet"][shear]
            for dset in sgrp.values():
                dset.resize(num_per_shear[shear], axis=0)


if __name__ == '__main__':
    args = get_args()
    main(args)
