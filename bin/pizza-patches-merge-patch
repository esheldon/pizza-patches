#!/usr/bin/env python

from pizza_patches.util import load_flist


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--flist',
        help='list of partition files to be merged',
        required=True,
    )
    parser.add_argument(
        '--outdir',
        help='output dir for merged files',
        required=True,
    )
    return parser.parse_args()


def make_outdir(outdir):
    import os
    if not os.path.exists(outdir):
        try:
            os.makedirs(outdir)
        except Exception:
            # probably a race condition
            pass


def merge_files(flist, outdir):
    import os
    import fitsio
    import esutil as eu

    bname = os.path.basename(flist[0])

    outfile = os.path.join(outdir, bname)
    if os.path.exists(outfile):
        raise RuntimeError(f'outfile {outfile} already exists')

    dlist = []
    for f in flist:
        print(f'    reading from {f}')
        with fitsio.FITS(f) as infits:
            # old versions used multiple extensions
            for hdu in infits:
                if hdu.has_data():

                    tdata = hdu.read()
                    dlist.append(tdata)

    data = eu.numpy_util.combine_arrlist(dlist)

    print(f'    writing to {outfile}')
    fitsio.write(outfile, data, extname='object_data', clobber=True)


def go(flist, outdir):
    import os

    bnames = [os.path.basename(f) for f in flist]
    if not all([n == bnames[0] for n in bnames]):
        raise RuntimeError(
            f'not all basenames are the same: {bnames}'
        )

    merge_files(flist, outdir)


def main():
    args = get_args()
    make_outdir(args.outdir)

    flist = load_flist(args.flist)
    go(flist, args.outdir)


if __name__ == '__main__':
    main()
